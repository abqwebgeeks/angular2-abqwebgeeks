<h1>What's New In 2?</h1>
<hr />
<h2>TypeScript</h2>
<p>While TypeScript itself is not a feature of Angular 2, the Angular has fully embraced TypeScript as the preferred language of Angular development. Although Angular can be written in Dart or JavaScript, TypeScript is clearly the direction the Angular team has taken.</p>
<div class="row">
	<div class="col-md-6">
		<h3>JavaScript</h3>
		<div [innerHTML]="todoJs"></div>
	</div>
	<div class="col-md-6">
		<h3>TypeScript</h3>
		<div [innerHTML]="todoTs">
		</div>
	</div>
</div>
<p>While TypeScript is a great language, why learn another language just to use a <em>JavaScript</em> framework!? TypeScript brings to the table strong typing more reminiscent of Java or .NET. It also benefits us with the simplified syntax for building out components such as class inheritance, more expressive closures, and null safety. The preceding classes are equivalent. In fact, the JavaScript version is automatically generated by the TypeScript compiler.</p>
<hr />
<h2>Components</h2>
<div class="row">
	<div class="col-md-3">
		<figure>
			<img class="img-responsive" src="images/rip-controllers.svg" alt="" />
			<figcaption><em>Image Credit:</em> <a href="https://ngeurope.org/">https://ngeurope.org/</a></figcaption>
		</figure>
	</div>
	<div class="col-md-9">
		<p>Controllers were the base of Angular 1's existence. It is where all the the logic of the application was concentrated. In Angular 2, controllers have been replaced by the the component. A comparison of the two will follow later.</p>
		<p>Components are where all the frontend logic connect and are more flexible and dynamic than controllers ever were. Controllers can inherit, and take advantage of Angular 2's enhanced dependency injection. Dependency Injection in Angular 2 also uses Ahead of Time (AoT) and tree shaking to further optimize performance.</p>
	</div>
</div>
<hr />
<h2>Routing</h2>
<p>Angular 2 is armed with a much more crisp and clean router than the predecessors of Angular 1. The router is more robust and can handle parameters in a clean and easy-to-use way.</p>
<hr />
<h2>Observables</h2>
<p>Observables have largely taken the place of promises. So, many people say, "Observables are just a replacement for promises!" ngOFact has rated that statement as <strong>mostly returns false</strong>. Observables are so much more! Promises were an all or nothing proposition: either it worked or it didn't. Observables allow one to customize the situation dynamically as the situation suits the individual circumstances.</p>
<hr />
<h2>Ionic</h2>
<p>This is a part I haven't explored completely. Angular 2 promises to be fully integrated into native frameworks such as Ionic. This is on my docket as I fully explore Angular 2 in the future.</p>
